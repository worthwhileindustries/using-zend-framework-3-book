{mainmatter}

# Введение в Zend Framework 3 {#intro}

В этой главе вы узнаете о Zend Framework 3, его основных принципах и компонентах.

## Что такое Zend Framework 3?

PHP - это популярный язык для разработки веб сайтов. Однако, как показывает практика, писать сайты на "чистом" PHP сложно.
Когда вы пишете веб приложение на "чистом" PHP, вам приходится организовывать свой код каким-либо способом,
собирать и проверять данные, введенные пользователем, реализовывать аутентификацию и авторизацию,
взаимодействовать с базой данных, тестировать свой код и т.д. Когда ваш сайт растет в размерах, 
становится все сложнее разрабатывать код однообразным и стандартизованным образом. Каждый член вашей команды
вводит свои собственные способы организации кода. Ваш код становится слишком сложным, медленным и его сложно поддерживать. 
Вы объединяете весь свой код в один гигантский PHP-скрипт, в котором нет никакого разделения зон ответственности. Вы много раз изобретаете колесо, что приводит к проблемам с безопасностью вебсайта. 
Более того, когда вы переключитесь на разработку другого сайта, вы заметите, что большая часть кода, написанного для старого сайта, может быть использована
повторно с маленькими изменениями. Этот код может быть выделен в библиотеку. Так и появились фреймворки.

I> Фреймворк - это библиотека, кусок программного обеспечения, также написанный на PHP, предоставляющий
I> разработчикам базу и стандартные пути для создания веб приложений.

Zend Framework 3 - это бесплатный PHP фреймворк с открытым исходным кодом. Его разработка направляется и 
спонсируется компанией Zend Technologies, также разработавшей и сам язык PHP. Первая версия (Zend Framework 1)
была выпущена в 2007; Zend Framework 2, вторая версия этого ПО, была выпущена в сентябре 2012. Zend Framework 3
(или коротко ZF3) была выпущена в июне 2016.

Zend Framework 3 предоставляет вам следующие возможности:

* Разрабатывайте свой веб сайт гораздо быстрее, чем вы бы это делали на чистом PHP. ZF3 предоставляет
  много компонентов, которые могут использоваться как база для создания сайтов.
  
* Более простое взаимодействие с членами вашей команды. Шаблон "Модель-Вид-Контроллер", используемый в
  ZF3, позволяет разделять бизнес-логику и слой презентации, делая структуру кода более однообразной и
  управляемой.
  
* Масштабируйте ваш веб сайт, используя концепцию модулей. ZF3 использует термин *модуль*, позволяющий разделять
  слабо связанные части сайта, таким образом повторно используя классы моделей, вида и контроллеров в других
  ваших работах.
  
* Получайте доступ к базе данных в объектно-ориентированном стиле. Вместо того, чтобы напрямую взаимодействовать
  с БД посредством SQL-запросов, используйте Doctrine Object-Relational Mapping (ORM), чтобы управлять
  структурой и отношениями ваших данных. С Doctrine вы работаете с таблицей БД как с классом на языке PHP,
  также называемый классом "сущности" (entity), а строка из таблицы БД представляется экземпляром такого класса.
  Doctrine позволяет абстрагироваться от типа БД и одинаково работать, например с MySQL и PostgreSQL.
  
* Создавайте безопасные веб сайты с использованием таких компонентов, как фильтры (filters) и валидаторы (validators) форм, 
  HTML output escapers и крипто алгоритмы,
  human check (Captcha) и Cross-Site Request Forgery (CSRF) элементы форм.
  
## Пример PHP вебсайта

Чтобы показать вам как сложно писать сайты *без* PHP-фреймворка, здесь мы 
создадим очень простой веб-сайт, состоящий из трех HTML страниц: *Home* (Домашняя), *Login* (Вход) and *Logout* (Выход). 
Для данного примера мы не будем пользоваться никаким фреймворком и постараемся использовать только "чистый" PHP.

I> Не дайте ввести себя в заблуждение - писать сайты с PHP фреймворком тоже может быть сложно, но с фреймворком
I> вы будете делать это в упорядоченной и безопасной манере. 
 
### Домашняя страница

I> Когда вы пишете веб-сайт на PHP, вы помещаете свой код в файл с расширением *.php*. Такой файл также называется
*скриптом* PHP. 

Сначала давайте реализуем страницу *Home* для веб-сайта. Чтобы это сделать, создайте скрипт *index.php* в корневой
директории документов Apache и поместите туда следующий код:

T> Чтобы понимать код, приведенный ниже, вам нужен опыт работы с PHP. Если у вас его нет, было бы хорошо, если бы вы 
T> обратились к руководству по PHP,
T> например к [w3schools.com](http://www.w3schools.com/php/).

{line-numbers=off,lang="php"}
~~~
<?php 
// index.php
session_start();

// If user is logged in, retrieve identity from session.
$identity = null;
if (isset($_SESSION['identity'])) {
    $identity = $_SESSION['identity'];
}
?>

<!DOCTYPE html>
<html>
    <head>
        <title>Home page</title>
    </head>
    <body>
        <h1>Home</h1>
        <?php if ($identity==null): ?>
        <a href="login.php">Sign in</a>
        <?php else: ?>
        <strong>Welcome, <?= $identity ?></strong> <a href="logout.php">Sign out</a>
        <?php endif; ?>
        
        <p>
            This is a simple website to demonstrate the advantages of a PHP framework
            and disadvantages of "pure" PHP.
        </p>
    </body>
</html>
~~~

Если вы теперь введете "http://localhost/index.php" в ваш браузер (например Google Chrome или Firefox), вы должны увидеть
страницу, как приведена ниже:

![Простая страница Home](../en/images/intro/simple_home_page.png)

### Страница Login

Далее давайте создадим страницу *Login*. Такая страница обычно имеет форму с полями *E-mail* и *Password*. Когда
пользователь отправляет форму, он проходит процедуру аутентификации и его личность сохраняется в сессию PHP.
Наш скрипт бы выглядел следующим образом:

{line-numbers=off,lang="php"}
~~~
<?php 
// login.php
session_start();

// If user is logged in, redirect him to index.php
if (isset($_SESSION['identity'])) {
    header('Location: index.php');
    exit;
}

// Check if form is submitted.
$submitted = false;
if ($_SERVER['REQUEST_METHOD']=='POST') {
    
    $submitted = true;
    
    // Extract form data.
    $email = $_POST['email'];
    $password = $_POST['password'];
    
    // Authenticate user.
    $authenticated = false;
    if ($email=='admin@example.com' && $password=='Secur1ty') {
        $authenticated = true;
        
        // Save identity to session.
        $_SESSION['identity'] = $email;
        
        // Redirect the user to index.php.
        header('Location: index.php');
        exit;
    }
}
?>

<!DOCTYPE html>
<html>
    <head>
        <title>Login page</title>
    </head>
    <body>
        <h1>Sign in</h1>
        <?php if ($submitted && !$authenticated): ?>
            <div class="alert">
                Invalid credentials.
            </div>
        <?php endif; ?>
        <form name="login-form" action="/login.php" method="POST">
            <label for="email">E-mail</label>
            <input type="text" name="email">
            <br>
            <label for="password">Password</label>
            <input type="password" name="password">
            <br>
            <input type="submit" name="submit" value="Sign In">
        </form>
    </body>
</html>
~~~

Если вы откроете URL "http://localhost/login.php" в браузере, то увидите следующую страницу:

![Простая страница Login](../en/images/intro/simple_login_page.png)

T> Чтобы войти, испольуйте `admin@example.com` и `Secur1ty` как ваш E-mail и пароль, соответственно.

### Страница Logout

И, наконец, давайте создадим страницу *Logout* которая будет убирать личность пользователя из сессии:

{line-numbers=off,lang="php"}
~~~
<?php 
// logout.php
session_start();

unset($_SESSION['identity']);
header('Location: index.php');
exit;
~~~

T> Полный код, приведенный выше, можно найти в примере
T> [Pure PHP](https://github.com/olegkrivtsov/using-zf3-book-samples/tree/master/purephp), идущем в комплекте с данной книгой.

### Анализ кода

Вышеприведенные скрипты - это не только типичный пример кода на "чистом" PHP. Это пример того, как вам 
*не нужно* писать свои веб-сайты (даже самые простые). Что в нем плохого?

1. Скрипты *index.php* и *login.php* плохи тем, что в них весь код слит в один единственный файл. Здесь нет никакого разделения
   ответственности. Интуитивно вы понимаете, что было бы удобнее разделить код, ответственный за аутентификацию
   пользователя и код, ответственный за презентацию (отображение HTML).

2. URL веб страниц выглядят уродливо (например, "http://localhost/index.php"). Нам бы хотелось спрятать это расширение
   файлов .php. И что произойдет, если пользователь попытается посетить страницу, которая не существует? Нам бы хотелось
   перенаправить пользователя на специальную страницу ошибки в данном случае.
  
3. Что будет, когда ваш сайт вырастет в размерах? Как вы будете организовывать свой код? Будете создавать новый 
   PHP скрипт на новую страницу? А что если вы захотите использовать некоторые из ваших PHP скриптов в других сайтах? 
   Интуитивно вы возможно уже понимаете, что было бы полезно организовать код в виде неких *модулей*.  
   
4. И *index.php*, и *login.php* содержат практически одинаковый код HTML-разметки. Почему мы должны копировать и вставлять
   этот общий лэйаут в каждый PHP-скрипт? Мы бы хотели использовать повтороно некий "главный" лэйаут на всех (или почти всех) страницах.
   
5. Скрипт *login.php* имеет проблемы с безопасностью, так как мы не реализовали никакую валидацию переменных POST.
   PHP сессия также может быть взломана. И кроме того, скрипт *login.php* будет помещаться в корневой директории
   документов Apache что не очень безопасно (было бы безопасней вынести его из директории документов). Скрипт *index.php* 
   также не безопасен, потому что мы не экранировали выводимую на страницу PHP-переменную (здесь возможны XSS-атаки).   

6. Эти скрипты не используют классы PHP. Инкапсуляция кода в классы в теории сделала бы код более струкрутрированным
   и простым в поддержке. 
   
7. В данных скриптах вам приходится писать свою собственную реализацию аутентификации пользователя (и многого другого). 
   Зачем изобретать колесо, и не воспользоваться хорошо написанной библиотекой для этого?  
 
Все вышеперечисленные проблемы могут быть легко решены, когда вы пишете вебсайт внутри фреймворка (такого как Zend Framework 3):

1. В ZF3 вы используете шаблон проектирования *Model-View-Controller* разделяя ваш PHP-код на модели
   (код, ответственный за аутентификацию пользователей, пойдет сюда), презентацию (код, отвечающий за рендеринг разметки HTML, пойдет сюда) 
   и контроллеров (код, ответственный за извлечение переменных POST пойдет сюда).
    
2. *Маршрутизация* ZF3 позволяет сделать URL веб-страниц выглядящей профессионально, скрывая расширения файлов .php. То, как будут
   выглядеть URL страниц, задается строгими правилами. Если пользователь попытается получить доступ к несуществующей странице,
   он автоматически будет перенаправлен на стандартную страницу ошибки.

3. В ZF3 вы можете использовать концепцию *модулей*. Это позволяет удобно выделить ваши модели, контроллеры и презентацию
   в автономную единицу (модуль) и легко использовать этот модуль в другом проекте.
   
4. В ZF3 вы можете задать общий шаблон для *лэйаута* и использовать его на всех (или на большинстве) веб-страниц.

5. ZF3 предоставляет различные средства безопасности, такие как фильтры и валидаторы форм, экранировщики вывода
   валидаторы сессии, криптографические алгоритмы и т.д. В вебсайте на ZF3 только скрипт *index.php* доступен веб-пользователям, все остальные скрипты PHP
   находятся вне директории документов Apache.

6. В сайте на ZF3 вы помещаете свой код в классы, что делает его хорошо организованным.

7. ZF3 предоставляет множество компонентов, которые вы можете использовать в своем веб-сайте: компонент для аутентификации, компонент для работы с формами и т.д.   
  
T> Теперь вы возможно имеете лучшее представление о преимуществах Zend Framework 3 и о том, что он может дать вам. В следующих
   разделах мы опишем ZF3 подробнее.
  
## Лицензия

Zend Framework 3 распространяется по лицензии BSD, позволяя вам свободно использовать его как в коммерческих,
так и в бесплатных приложениях. Вы можете модифицировать код фреймворка и даже выпустить его под другим названием.
Единственное, что вы не можете сделать, это удалить copyright notice из файлов фреймворка. Если вы 
используете Zend Framework 3, также рекомендуется указать это в документации к сайту или на странице "About".

Ниже вы можете найти полную лицензию Zend Framework 3. 

{line-numbers=off,lang=text}
~~~
Copyright (c) 2005-2015, Zend Technologies USA, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions 
are met:

	* Redistributions of source code must retain the above copyright 
	  notice, this list of conditions and the following disclaimer.

	* Redistributions in binary form must reproduce the above copyright 
	  notice, this list of conditions and the following disclaimer in 
	  the documentation and/or other materials provided with the 
	  distribution.

	* Neither the name of Zend Technologies USA, Inc. nor the names of 
	  its contributors may be used to endorse or promote products 
	  derived from this software without specific prior written 
	  permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
~~~

## Пользовательская поддержка

Поддержка - это важная вещь, о которой стоит подумать, когда вы решаете, стоит ли использовать фреймворк
как базу для вашего вебсайта, или нет. Поддержка включает в себя хорошо написанную документацию,
вебинары, форумы сообщества, и (опционально) коммерческую поддержку, такую как обучение и сертификация.

![Официальный сайт Zend Framework](../en/images/intro/zend_framework_site.png)

*Документация*. Документация по Zend Framework находится по [этому адресу](http://framework.zend.com/learn/).
Она включает в себя руководство для начинающих, руководство для разработчика, и описание API
(API расшифровывается как Application Programming Interface).

*Форум сообщества*. Вы можете задавать вопросы по использованию Zend Framework 3 на [StackOverflow](https://stackoverflow.com/search?q=zend+framework+3).
Ответы обычно публикуются такими же разработчиками ZF3, как и вы.

*Вебинары* - это видео руководства, охватывающие важнейшие темы по Zend Framework. Полный список вебинаров
можно найти по [этой ссылке](http://www.zend.com/en/resources/webinars/framework).

*Обучение* с живыми инструкторами можно найти по [этой ссылке](http://www.zend.com/en/services/training/course-catalog/zend-framework-2).
Здесь вы можете изучить Zend Framework посредством выполнения упражнений, создания мини-проектов и разрабатывая
настоящий код. 

*Сертификация*. Позволяет вам стать Zend Certified Engineer (ZCE), и таким образом улучшить свои навыки
и получить признание на рынке труда. Сертификацию можно пройти [здесь](http://www.zend.com/en/services/certification).

## Исходный код фреймворка

Исходный код Zend Framework 3 хранится на хостинге GitHub внутри [GIT-репозитариев](https://github.com/zendframework). 
На каждый компонент ZF3 приходится по одному репозитарию.

I> В большинстве случаев вам не нужно скачивать код Zend Framework 3 вручную.
I> Вместо этого, вы будете устанавливать его с помощью менеджера зависимостей Composer. Мы
I> познакомимся с Composer поближе в главе под названием [Zend Skeleton Application](#skeleton). 

### Стандарты оформления кода

Хорошей практикой является введение какого либо стандарта оформления кода. Такой стандарт бы задавал правила для
наименования классов, форматирования кода и т.д. В Zend Framework 3 есть такой стандарт - его можно прочитать [здесь](https://github.com/zendframework/zendframework/wiki/Coding-Standards).
Весь код в ZF3 следует правилам оформления, изложенным в том документе.

T> Если вы планируете писать вебсайт на ZF3, рекомендуется использовать этот стандарт для вашего кода тоже. Это
T> сделает ваш код "однородным" и другие люди смогут с легкостью его расширять и поддерживать.

## Поддерживаемые операционные системы

Как и любой PHP веб-сайт, ваш веб-сайт на основе ZF3 будет работать на сервере Linux или под управлением
любой другой операционной системы, где работает PHP. Например, для создания примеров для этой книги автор
использовал ОС Ubuntu Linux.

Если вы еще не знаете какую ОС использовать для веб разработки, рекомендуется использовать Linux,
потому что большинство серверных систем работают под управлением ОС Linux. Вы можете обратиться к 
[Приложению A. Настройка среды веб разработки](#devenv), чтобы получить инструкции по установке и настройке рабочей среды.

## Системные требования

Zend Framework 3 требует, чтобы ваш сервер имел установленную версию PHP 5.6 (либо выше).
Обратите внимание, что это довольно жесткое требование. Не все дешевые хостинги и не все приватные
серверы имеют такую новую версию PHP.

Более того, рекомендованный способ установки ZF3 (и других компонентов, от которых зависит ваше
приложение) - это установка посредством [Composer](http://getcomposer.org/).
Это требует доступа к терминалу (SSH). Некоторые дешевые хостинги предоставляют только FTP  доступ.

ZF3 использует модуль Apache `mod_rewrite` для перенаправления пользователей на скрипт входа для вашего
сайта (site entry script). Вам также может понадобиться установить некоторые расширения PHP, например 
`xdebug` или `memcached`. Это может быть сложно, когда вы используете веб хостинг, потому что для этого
требуется доступ к серверу через SSH терминал.

Так что, если вы планируете использовать ZF3 на веб хостинге, подумайте дважды. Лучший сервер, на который
можно установить ZF3 - это сервер с последней версией PHP и с SSH-доступом, чтобы можно было запустить
Composer и установить расширения PHP.

Если ваша компания имеет свою серверную инфраструктуру и может позволить себе апгрейдить версию PHP,
установите ZF3 на этот частный сервер.

Приемлемая альтернатива - это установка сайта в облаке, таком как [Amazon Web Services](http://aws.amazon.com/). 
Amazon позволяет арендовывать виртуальные машины на базе ОС Linux (сервис EC2). EC2 довольно дешев и
предоставляет бесплатный [пробный период в течение 1 года](http://aws.amazon.com/free/).
Мы предоставляем инструкции для начинающих о том, как установить веб-сайт на основе ZF3 в облако Amazon EC2
в [Приложении Д. Установка вебсайта на ZF3 в Amazon EC2](#ec2-tutorial).

## Безопасность

Zend Framework 3 следует наилучшим практикам, чтобы дать вам безопасную базу для создания собственных
веб-сайтов. Создатели ZF3 регулярно выпускают обновления безопасности. Вы можете встроить эти обновления
в свой сайт одной командой через Composer.

I> Практика показывает, что использование фреймворка для написания вашего веб-сайта улучшает уровень безопасности
I> по сравнением с использованием "чистого" PHP, потому что вам не нужно повторно "изобретать колесо". Большинство уязвимостей в безопасности фреймворков
I> уже давно известны и исправлены сообществом пользователей.

ZF3 предоставляет следующие средства обеспечения безопасности веб-сайта:

* *Входной скрипт* (*index.php*) - это единственный файл PHP, доступный для веб-посетителей. Все остальные PHP скрипты находятся
  вне корневой директории документов вебсервера Apache. Это гораздо безопаснее, чем давать всем посетителям доступ к любому из PHP скриптов.  
  
* *Маршрутизация запросов (Routing)* позволяет задавать строгие правила, как должен выглядеть приемлемый URL
  адрес веб-страницы. Если пользователь вводит неверный URL адрес в строку навигации браузера, он автоматически
  направляется на страницу с сообщением об ошибке.

* *Списки контроля доступа (Access control lists)* и *Доступ на основе ролей (Role-Based Access Control, RBAC)* 
  позволяют задавать правила для разрешения или запрета на доступ к конкретным ресурсам вашего веб-сайта. Для примера,
  анонимный пользователь сможет получить доступ только к главной странице сайта, авторизованный пользователь сможет
  получить доступ к личной странице, а администратор сможет получить доступ к панели управления сайтом.
  
* *Валидаторы (validators) и фильтры (filters) веб-форм* позволяют быть уверенными в том, что вредные
  данные, введенные пользователем, не пройдут через веб-форму. Фильтры, например, позволяют обрезать 
  введенную строку или удалять из нее HTML тэги. Валидаторы используются, чтобы удостовериться, что 
  данные, отправленные через веб-форму, отвечают неким правилам. Например, E-mail валидатор проверяет,
  что поле электронного почтового адреса содержит правильный адрес, а если нет, выдает сообщение об
  ошибке и требует ввести корректные данные.

* Элементы формы *Captcha* и *CSRF* (Cross-Site Request Forgery) используются для предотвращения хакерских атак.

* Компонент *Zend\Escaper* позволяет вырезать нежелательные тэги HTML из данных, выводимых на веб-страницу.
  
* *Поддержка криптографии* позволяет хранить важные данные, такие как пароли, зашифрованными стойкими крипто
  алгоритмами, которые сложно взломать.

## Производительность

ZF3 обладает следующими свойствами, гарантирующими приемлемую производительность (performance): 

*Ленивая загрузка классов (Lazy class autoloading).* Классы загружаются только тогда, когда это нужно.
Вам не нужно писать `require_once` для каждого класса, который вы хотите загрузить. Вместо этого, фреймворк
автоматически обнаруживает ваши классы, используя *автозагрузку* (autoloader).

*Эффективная загрузка сервисов и плагинов.* В ZF3 классы бизнес-логики инстанциируются только когда это
действительно необходимо. Это достигается посредством менеджера сервисов (service manager), центрального
контейнера всех сервисов приложения.
  
*Поддержка кеширования.* PHP имеет несколько расширений для кеширования (таких, как Memcached), которые
могут использоваться для ускорения сайтов, созданных на основе ZF3. 

## Шаблоны проектирования

Разработчики Zend Framework 3 являются большими фанатами разнообразных шаблонов проектирования. Хотя вам
не нужно понимать шаблоны проектирования, чтобы читать эту книгу, в этой секции мы кратко перечислим
основные шаблоны, на которых основан ZF3.

* *Модель-Вид-Контроллер (Model-View-Controller, MVC)*. Шаблон Model-View-Controller используется во
  всех современных PHP фреймворках. В приложении MVC вы разделяете код на три категории: модели (ваша
  бизнес-логика), вид (презентация) и контроллеры (код, отвечающий за взаимодействие с пользователем).
  Такое разделение также называется *separation of concerns*. С MVC вы можете *повторно использовать* 
  компоненты этой триады в других проектах. Также легко заменить любую часть триады. Например, вы можете
  легко заменить вид другим видом, без изменения бизнес-логики.
  
* *Проектирование на основе Предметной Области (Domain Driven Design, DDD)* В Zend Framework 3 вы будете
  делить слой моделей еще глубже на *сущности (entities)*, т.е. классы, работающие с таблицами БД, *репозитарии (repositories)*,
  т.е. классы, позволяющие доставать сущности из БД, *объекты-значения (value objects)*, т.е. классы
  моделей, не имеющие идентификатора, и *сервисы (services)*, то есть классы, отвечающие за бизнес-логику.
  Дополнительно вы будете иметь *веб-формы (forms)*, т.е. классы моделей, ответственные за ввод данных пользователя,
  помощники вида (view helpers), т.е. повторно используемые плагины, предназначенные для отображения
  различного контента на веб-странице, и, вероятно, другие типы моделей.

* *Шаблон Aspect Oriented Design.* В ZF3 все основано на событиях (events). Когда пользователь запрашивает
  веб-страницу, генерируется событие. Наблюдатель (observer) может реагировать на событие. Например,
  компонент `Router` разбирает URL на части и определяет, какой контроллер нужно вызвать. Когда событие
  наконец достигает визуализатора (renderer), генерируется HTTP ответ, и пользователь видит результирующую
  веб-страницу.  

* *Шаблон Singleton.* В ZF3 существует такой объект как менеджер сервисов (service manager), который является
  централизованным хранилищем всех сервисов, имеющихся в приложении. Каждый сервис существует только в *одном*
  экземпляре. 

* *Шаблон Strategy.* Стратегия - это всего лишь класс, инкапсулирующий какой-либо алгоритм. И вы можете
  использовать разные алгоритмы, если срабатывают определенные условия. Например, визуализатор (renderer)
  имеет несколько стратегий для визуализации веб-страницы (например, он может сгенерировать HTML страницу, 
  JSON массив или RSS feed, основываясь на заголовках HTTP запроса).
  
* *Шаблон Adapter.* Адаптеры позволяют адаптировать класс общего назначения к конкретному случаю использования.
  Например, компонент `Zend\Db` предоставляет доступ к базе данных независимо от типа СУБД. Внутри себя,
  он использует адаптеры для каждой поддерживаемой СУБД (SQLite, MySQL, PostgreSQL и т.д.)
  
* *Шаблон Factory.* Вы можете создать экземпляр класса посредством оператора `new`. Или вы можете
  создать его с помощью фабрики. Фабрика - это всего лишь класс, занимающийся созданием других объектов.
  Фабрики полезны, так как упрощают внедрение зависимостей (dependency injection). Это также упрощаяет
  тестирование ваших моделей и контроллеров.

## Основные компоненты ZF3

Создатели ZF3 считают, что фреймворк должен быть набором слабо связанных компонентов с минимумом 
зависимостей друг от друга. Это и есть способ организации ZF3. 

Идея состоит в том, чтобы дать вам использовать выбранные компоненты ZF3 как в составе MVC-фреймворка,
так и по-одиночке. Это делается очень просто, если вспомнить, что каждый компонент - это пакет, устанавливаемый
с помощью Composer, так что вы можете установить его одной командой.

Есть несколько "главных" компонентов ZF3, которые используются явно или неявно практически в любом веб-приложении, 
и поэтому их важно знать:

  * `Zend\EventManager` позволяет создавать события (events) и регистрировать обработчики событий. 
     
  * `Zend\ModuleManager` В сайтах, созданных на базе ZF3, все состоит из модулей, и этот компонент позволяет
    загружать модули.                                                  

  * `Zend\ServiceManager`  Это центральный репозитарий всех сервисов, доступных в приложении. В сервисах содержится
    бизнес-логика приложения.
   
  * `Zend\Http` предоставляет простой интерфейс для работой с Hyper-Text Transfer Protocol (HTTP) 
    запросами.                              
     
  * `Zend\Mvc` Поддержка шаблона Модель-Вид-Контроллер (Model-View-Controller). 

  * `Zend\View` Предоставляет систему помощников (view helpers) и output escapers. Используется в слое представления (вида). 

  * `Zend\Form` Помогает собирать данные, введенные пользователем, а также фильтровать их, проверять на корректность и
    отображать формы на веб-странице.

  * `Zend\InputFilter` Позволяет задавать правила фильтрации и валидации для данных, введенных пользователем в веб-форму.
    
  * `Zend\Filter` Предоставляет набор часто используемых фильтров, таких как string trimmer.

  * `Zend\Validator` Предоставляет набор часто используемых валидаторов. 

## Отличия от Zend Framework 2

Для читателей, которые имеют опыт работы с Zend Framework 2, в этом разделе мы дадим некоторую информацию о
том, что изменилось в Zend Framework 3.

### Обратная совместимость

ZF3 - это эволюционный релиз, и таким образом обратная совместимость сохраняется в большинстве случаев.
Однако, некоторая работа по миграции все равно необходима, если вы использовали интерфейс `ServiceLocatorAwareInterface`
в своем коде (что вы, вероятно, делали). В ZF3 этот интерфейс был удален, и теперь все зависимости должны
передаваться посредством фабрик. Так что вам придется написать фабрики для всех ваших контроллеров, сервисов,
помощников вида и плагинов контроллеров.

### Компоненты

В ZF2 компоненты хранились в едином репозитарии под названием `zendframework/zf2`.
В ZF3 компоненты теперь хранятся в своих собственных репозитариях, по одному GIT репозитарию на компонент (например, 
`zendframework/zend-mvc`, `zendframework/zend-servicemanager`, `zendframework/zend-form`, и т.д.). 
Это позволяет разрабатывать и выпускать компоненты независимо друг от друга.

Теперь компоненты еще более независимы друг от друга, чем раньше. Например, компонент `Zend\Mvc` был разделен
на несколько компонентов, и для маршрутизации теперь используется компонент `Zend\Router`.

Теперь в `composer.json` рекомендуется указывать названия компонентов, от которых зависит приложение,
хотя все еще можно указать зависимость от пакета `zendframework/zendframework`, который устанавливает
*все* доступные компоненты.

### Установщик компонентов

В ZF3 введен новый плагин для Composer, называемый *component installer*. Он позволяет устанавливать
компоненты как модули ZF. Установщик вставляет информацию о компоненте в файл конфигурации приложения.

### Производительность ServiceManager и EventManager 

Создатели ZF3 проделали отличную работу по улучшению производительности компонентов `Zend\ServiceManager` и `Zend\EventManager`.
Теперь они в несколько раз более быстры, чем раньше. Недостаток - вам придется проделать некоторую работу по миграции.
Названия контроллеров и сервисов теперь рекомендуется писать с использованием конструкции PHP 5.5 `::class`. 
Например, если раньше вы регистрировали свой контроллер как `Application\Controller\Index`, теперь вам
нужно регистрировать его как `IndexController::class`.

### PSR-4

В ZF2 рекомендуемая структура директорий подчинялась стандарту PSR-0, в то время как в ZF3 используется
стандарт PSR-4. Это требует от вас (небольшой) работы по миграции.

### Middleware 

В компании Zend считают, что будущее PHP за middleware. "Middleware - это просто код, выполняющийся
между входящим HTTP запросом и выходным HTTP ответом." Теперь вы можете регистрировать middleware listener
в своем MVC приложении. 

### Фокус на документации

Теперь каждый компонент фреймворка содержит свою собственную документацию. Документация теперь написана
в формате Markdown и гораздо лучше продумана.
  
## Выводы

PHP-фреймворк - это библиотека, дающая разработчикам базу и стандартные пути для создания веб-приложений.
Zend Framework 3 - это современный фреймворк, созданный под руководством компании Zend Technologies,
производителя языка PHP. Этот фреймворк дает разработчикам выдающиеся возможности для создания масштабируемых
и безопасных веб-сайтов. ZF3 распространяется под лицензией BSD и может свободно использоваться как
в коммерческих, так и в бесплатных веб-приложениях.

